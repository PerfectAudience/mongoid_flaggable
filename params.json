{"name":"mongoid_flaggable","tagline":"Lightweight & powerful flagging/tagging system for mongoid","body":"mongoid_flaggable [![Gem Version](https://badge.fury.io/rb/mongoid_flaggable.png)](http://badge.fury.io/rb/mongoid_flaggable) [![Code Climate](https://codeclimate.com/github/mchail/mongoid_flaggable.png)](https://codeclimate.com/github/mchail/mongoid_flaggable) [![Build Status](https://travis-ci.org/mchail/mongoid_flaggable.png?branch=master)](https://travis-ci.org/mchail/mongoid_flaggable)\r\n==============\r\n\r\nmongoid_flaggable is a lightweight and powerful way to add flags/tags (boolean values) to your mongoid models.\r\n\r\n# Installation\r\n\r\nInstall directly from rubygems:\r\n\r\n```ruby\r\ngem install mongoid_flaggable\r\n```\r\n\r\nOr if you are using a Gemfile, place this in your Gemfile:\r\n\r\n```ruby\r\ngem 'mongoid_flaggable'\r\n```\r\n\r\n# Use cases\r\n\r\nThis gem was created to give developers an easy way to flag mongoid models with boolean values. Flags are well-suited for temporary boolean values that do not merit the overhead of an additional field on the model and in the database. This includes gradual feature rollouts (whitelisting certain users for experimental features) and temporary metadata useful for analytics. Flags are *not* well-suited for data you intend to persist on your documents long-term.\r\n\r\n# Configure a model to be flaggable:\r\n\r\nOne line of code is needed to set up a model with mongoid_flaggable.\r\n\r\n```ruby\r\nclass Book\r\n    include Mongoid::Document\r\n    include Mongoid::Flaggable         #=> it's this one\r\nend\r\n```\r\n\r\nBe sure to run `rake db:mongoid:create_indexes` after adding mongoid_flaggable to a model. This will create an index on the `flag_array` field it makes use of.\r\n\r\n# Basic usage\r\n\r\n```ruby\r\nbook = Book.create\r\nbook.flags                             #=> []\r\nbook.add_flag!(:out_of_print)\r\nbook.flags                             #=> [\"out_of_print\"]\r\nbook.flag?(:out_of_print)              #=> true\r\nbook.flag?(:florinese_translation)     #=> false\r\nbook.remove_flag!(:out_of_print)\r\nbook.flags                             #=> []\r\n```\r\n\r\n# API\r\n\r\n- All methods accept `\"strings\"` or `:symbols`. The arguments are cast to strings before being used.\r\n- Methods that end in a `!` will immediately write to the database. Methods without the bang will make updates in memory (if the intention of the method is to update data), but will not persist the changes (i.e. after calling `book.add_flag(:out_of_print)`, you must call `book.save` to persist the new flag).\r\n\r\n### Instance Methods\r\n\r\nAdd a flag to a specific model **without saving**\r\n\r\n```ruby\r\nbook.add_flag(:out_of_print)\r\n```\r\n\r\nAdd a flag to a specific model **and save immediately**\r\n\r\n```ruby\r\nbook.add_flag!(:out_of_print)\r\n```\r\n\r\nRemove a flag from a specific model **without saving**\r\n\r\n```ruby\r\nbook.remove_flag(:out_of_print)\r\n```\r\n\r\nRemove a flag from a specific model **and save immediately**\r\n\r\n```ruby\r\nbook.remove_flag!(:out_of_print)\r\n```\r\n\r\nClear all flags from a specific model **without saving**\r\n\r\n```ruby\r\nbook.clear_flags\r\n```\r\n\r\nClear all flags from a specific model **and save immediately**\r\n\r\n```ruby\r\nbook.clear_flags!\r\n```\r\n\r\nGet array of flags from a model - guaranteed to return an array or zero or more strings\r\n\r\n```ruby\r\nbook.flags   # => [\"out_of_print\"]\r\n```\r\n\r\nTest for the presence of a flag\r\n\r\n```ruby\r\nbook.flag?(:out_of_print)\r\n```\r\n\r\nTest for the presence of **any** of multiple flags\r\n\r\n```ruby\r\nbook.any_flags?(:out_of_print, :florinese_translation)\r\n```\r\n\r\nTest for the presence of **all** of multiple flags\r\n\r\n```ruby\r\nbook.all_flags?(:out_of_print, :florinese_translation)\r\n```\r\n\r\n### Class Methods\r\n\r\n- All finders return a `Mongoid::Criteria` that may be chained with additional clauses (e.g. `where`, `limit`, `skip`, `order_by`, etc.)\r\n\r\nRetrieve documents with a given flag\r\n\r\n```ruby\r\nBook.by_flag(:out_of_print)\r\n```\r\n\r\nRetrieve documents with **any** of multiple flags\r\n\r\n```ruby\r\nBook.by_any_flags(:out_of_print, :florinese_translation)\r\n```\r\n\r\nRetrieve documents with **all** of multiple flags\r\n\r\n```ruby\r\nBook.by_all_flags(:out_of_print, :florinese_translation)\r\n```\r\n\r\nGet the number of documents with a given flag\r\n\r\n```ruby\r\nBook.flag_count(:out_of_print)\r\n```\r\n\r\nGet the number of documents with **all** of multiple flags\r\n\r\n```ruby\r\nBook.flag_count(:out_of_print, :florinese_translation)\r\n```\r\n\r\nGet an array of all the distinct flags in use on the collection\r\n\r\n```ruby\r\nBook.distinct_flags\r\n```\r\n\r\nAdd a flag to multiple documents matching given criteria\r\n\r\n```ruby\r\nBook.bulk_add_flag!(:out_of_print, {:last_printed_at.lt => 20.years.ago})\r\n```\r\n\t\r\nRemove a flag from multiple documents matching given criteria\r\n\r\n```ruby\r\nBook.bulk_remove_flag!(:out_of_print, {author_name: \"William Goldman\"})\r\n```\r\n\r\nRemove a flag from all documents\r\n\r\n```ruby\r\nBook.bulk_remove_flag!(:out_of_print)\r\n```\r\n\r\nGet a sorted frequency hash of all flags used on a collection\r\n\r\n```ruby\r\nBook.flag_frequency           #=> {\"out_of_print\" => 20, \"florinese_translation\" => 5}\r\n```\r\n\r\n# Contributing\r\n\r\n1. Fork it\r\n2. Make your changes\r\n3. Write/update tests. Run with `rake`.\r\n4. Issue a Pull Request\r\n\r\n# License\r\n\r\nMIT. Go nuts.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}